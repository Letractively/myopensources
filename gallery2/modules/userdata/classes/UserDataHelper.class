<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * A helper class for the User Data module.
 * @package UserData
 * @subpackage Classes
 * @author Serban Constantinescu <serban.constantinescu@gmail.com>
 * @version $Revision: 15513 $
 * @static
 */

/**
 * Session key for storing item admin mode
 */
GalleryCoreApi::requireOnce('modules/userdata/classes/UserDataInterface_1_0.class');

/**
 * A helper class for the User Data module.
 * @static
 */
class UserDataHelper extends UserDataInterface_1_0 /* and GalleryEventListener */ {

    /**
     * Load and decode module parameters
     *
     * @return array GalleryStatus a status code
     *               mixed containing custom field data
     */
    function loadParameters() {
	list ($ret, $param) = GalleryCoreApi::getPluginParameter('module','userdata','userdata');
	if ($ret) { return array($ret, null, null); }
	$fields = array();
	foreach ((!empty($param) ? explode('|', $param) : array()) as $tmp) {
	    $list = explode('`', $tmp);
	    $fields[] = array('field' => $list[0],
			      'width' => $list[1],
                              'height' => $list[2],
			      'choices' => array_splice($list, 3));
	}
	return array(null, $fields);
    }

    /**
     * Encode and save module parameters
     *
     * @param array $fields data to save
     * @return GalleryStatus a status code
     */
    function saveParameters($fields) {
	    $list = array();
	    foreach ($fields as $field) {
		    $list[] = $field['field'] . '`' . $field['width'] . '`'
			    . $field['height']
			    . (!empty($field['choices']) ? ('`' . implode('`', $field['choices'])) : '');
	    }
	    $ret = GalleryCoreApi::setPluginParameter('module', 'userdata', 'userdata', implode('|', $list));
	    if ($ret) { return $ret; }
	    return null;
    }

    /**
     * Add a new field
     *
     * @param string $newField field name
     * @param int $newWidth width of the field
     * @param int $newHeight height of the field
     * @return array object GalleryStatus a status code
     *               boolean true on success, false on duplicate field name
     */
    function addField($newField, $newWidth = 20, $newHeight = 1) {
	    list ($ret, $fields) = UserDataHelper::loadParameters();
	    if ($ret) { return array($ret, null); }
	
	    foreach ($fields as $field) {
	      if ($field['field'] == $newField) { return array(null, false); }
	    }
	    $fields[] = array('field' => $newField,
			                 'width' => $newWidth,
                       'height' => $newHeight,
                       'choices' => array());
	    $ret = UserDataHelper::saveParameters($fields);
	    if ($ret) { return array($ret, null); }
	    return array(null, true);
    }

    /**
     * Find a field in a parameter list
     *
     * @param array $list parameter list
     * @param string $field field to find
     * @return int index or -1 if not found
     */
    function findParameter(&$list, $field) {
	    foreach ($list as $i => $item) {
	      if ($item['field'] == $field) { return $i; }
	    }
	    return -1;
    }

    /**
     * Delete field values for given field
     *
     * @param string $field field to delete
     * @return GalleryStatus a status code
     */
    function deleteField($field) {
	    $ret = GalleryCoreApi::removeMapEntry('UserDataMap', array('field' => $field));
	    if ($ret) { return $ret; }
	    return null;
    }

    /**
     * Load user data for a user
     *
     * @param array $user object GalleryEntity user
     * @return array GalleryStatus a status code
     *               array(field => value)
     */
    function fetchFieldValues($user) {
	    global $gallery;
	    $data = $result = array();

	    list ($ret, $params) = UserDataHelper::loadParameters();
	    if ($ret) { return array($ret, null, null); }

	    list ($ret, $searchResults) = GalleryCoreApi::getMapEntry('UserDataMap',
	      array('field', 'value'), array('userId' => $user->getId()));
	    if ($ret) { return array($ret, null, null); }

	    while ($rec = $searchResults->nextResult()) {
	      $data[$rec[0]] = $rec[1];
	    }

	    foreach ($params as $key=>$val) {
	        $field=$params[$key]['field'];
		      if (isset($data[$field])) {
			      $params[$key]['value'] = $data[$field];
		      } else {
			      $params[$key]['value'] = '';
		      }
		  }

	    return array(null, $params);
    }

    /**
     * Save user data values for specified user, overwriting any existing values
     *
     * @param object GalleryEntity $user
     * @param array $fields (field => value)
     * @return GalleryStatus a status code
     */
    function saveFieldValues(&$user, $fields) {
    	$ret = GalleryCoreApi::removeMapEntry('UserDataMap', array('userId' => $user->getId()));
	if ($ret) { return $ret; }
	foreach ($fields as $field) {
	    if (!empty($field['value'])) {
		$ret = GalleryCoreApi::addMapEntry( 'UserDataMap',
		             array('userId' => $user->getId(), 'field' => $field['field'], 'value' => $field['value']));
		if ($ret) { return $ret; }
	    }
	}
	return null;
    }

    /**
     * Event handler for GalleryEntity::delete event
     * Remove any userdata values for entity (a user) being deleted.
     *
     * @see GalleryEventListener::handleEvent
     */
    function handleEvent($event) {
	    if ($event->getEventName() == 'GalleryEntity::delete') {
	      $entity = $event->getEntity();
	      if (GalleryUtilities::isA($entity, 'GalleryUser')) {
	        $ret = GalleryCoreApi::removeMapEntry(
		          'UserDataMap', array('userId' => $entity->getId()));
	        if ($ret) { return array($ret, null); }
	      }
	    }
	    return array(null, null);
    }

    /**
     * Handler for User Data Admin actions
     *
     * @param array $form form data
     * @return array GalleryStatus a status code
     *               mixed status to return from controller
     */
    function handleAdminAction($form) {
	$status = array();

	if (isset($form['action']['save'])) {
	    list ($ret, $param) = UserDataHelper::loadParameters();
	    if ($ret) {
		return array($ret, null);
	    }
		$newParam = array();
		if (isset($form['index'])) {
		    foreach ($form['index'] as $newidx => $oldidx) {
			$newParam[] =
				array('field' => $param[$oldidx]['field'],
				      'width' => $param[$oldidx]['width'],
				      'height' => $param[$oldidx]['height'],
				      'choices' => $param[$oldidx]['choices']);
		    }
		}
	    $ret = UserDataHelper::saveParameters($newParam);
	    if ($ret) {
		return array($ret, null);
	    }
	    $status['saved'] = 1;
	
  /* add a new field */
  } else if (isset($form['action']['add'])) {
	    $newField = str_replace('|', ':', str_replace('`', "&#039;", $form['newField']));
	    if (empty($newField)) {
		    $status['error']['empty'] = 1;
		    return array(null, $status);
	    }
	    list ($ret, $added) = UserDataHelper::addField($newField, $form['newWidth'], $form['newHeight']);
	    if ($ret) { return array($ret, null); }
	    if ($added) {
        $status['added'] = 1;
	    } else {
		    $status['error']['duplicate'] = 1;
	    }
	/* change a field */
  } else if (isset($form['action']['change'])) {
	    list ($ret, $param) = UserDataHelper::loadParameters();
	    if ($ret) { return array($ret, null); }
	    
	    $idx = UserDataHelper::findParameter($param, $form['opField']);
	    if ($idx < 0) {
		    return array(GalleryCoreApi::error(ERROR_MISSING_OBJECT), null);
	    }
		  /* Remove from $set; delete from all items */
		  $param[$idx]['width'] = $form['opWidth'];
		  $param[$idx]['height'] = $form['opHeight'];
		  $ret = UserDataHelper::saveParameters($param);
		  if ($ret) { return array($ret, null); }
		  //$ret = UserDataHelper::deleteField($form['removeField']);
		  //if ($ret) { return array($ret, null); }
		  $status['changed'] = 1;
	
	
	/* remove a field */
	} else if (isset($form['action']['remove'])) {
	    list ($ret, $param) = UserDataHelper::loadParameters();
	    if ($ret) { return array($ret, null); }
	    
	    $idx = UserDataHelper::findParameter($param, $form['opField']);
	    if ($idx < 0) {
		    return array(GalleryCoreApi::error(ERROR_MISSING_OBJECT), null);
	    }
		  /* Remove from $set; delete from all items */
		  unset($param[$idx]);
		  $ret = UserDataHelper::saveParameters($param);
		  if ($ret) { return array($ret, null); }
		  $ret = UserDataHelper::deleteField($form['opField']);
		  if ($ret) { return array($ret, null); }
		  $status['removed'] = 1;


	    if (empty($status)) {
		$status['moved'] = 1;
	    }
	/* change the picklist */
	} else if (isset($form['action']['picklist'])) {
	    $choices = array();
	    foreach (array_map('trim', explode("\n", $form['picklist'])) as $tmp) {
		    if (!empty($tmp)) {
		      $choices[] = $tmp;
		    }
	    }
	    list ($ret, $param) = UserDataHelper::loadParameters();
	    if ($ret) { return array($ret, null); }
		  $idx = UserDataHelper::findParameter($param, $form['pickField']);
		  if ($idx >= 0) {
		    $param[$idx]['choices'] = $choices;
		    $ret = UserDataHelper::saveParameters($param);
		    if ($ret) {	return array($ret, null); }
		    $status['picklist'] = 1;
		    //break;
		  }
	} /* else $form['action']['reset'] */

	return array(null, $status);
    }

    /**
     * Load form data for Admin template
     *
     * @param array $form form
     * @return object GalleryStatus a status code
     */
    function loadAdminForm(&$form) {
	    list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'userdata');
	    if ($ret) { return $ret; }

	    list ($ret, $form['fields']) = UserDataHelper::loadParameters();
	    if ($ret) { return $ret; }

	    return null;
    }

    /**
     * @see CustomFieldInterface_1_0::createUserData
     */
    function createUserData($fieldNames) {
	    $duplicates = array();
	    foreach ($fieldNames as $fieldName) {
	      list ($ret, $added) = UserDataHelper::addField($fieldName);
	      if ($ret) { return array($ret, null); }
	      if (!$added) {
		      $duplicates[] = $fieldName;
	      }
	    }
	    return array(null, $duplicates);
    }

    /**
     * @see CustomFieldInterface_1_0::setCustomFieldValues
     */
    function setUserDataValues($userId, $data) {
	    list ($ret, $user) = GalleryCoreApi::loadEntitiesById($userId);
	    if ($ret) { return $ret; }
	    $ret = UserDataHelper::saveUserDataValues($userId, $data);
	    if ($ret) { return $ret; }
	    return null;
    }
}
?>
